server:
  port: 9991

spring:
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  application:
    name: system
  #配置cloud
  cloud:
    #配置consul
    consul:
    #配置consul主机
    host: localhost
    #配置consul端口
    port: 8500
    #配置服务发现
    discovery:
      #配置服务名称
      service-name: ${spring.application.name}
      #配置服务实例id
      instance-id: ${spring.application.name}-${server.port}
      #是否注册服务
      register: true
      #使用ip地址注册
      prefer-ip-address: true
      #本服务ip
      ip-address: ${spring.cloud.client.ip-address}
      #本服务的port
      port: ${server.port}
      #每隔15秒检查服务的健康状态
      health-check-interval: 15s
    #配置负载均衡
    loadbalancer:
      #配置健康检查
      health-check:
        #配置检查的时间间隔
        initial-delay: 1s
      #配置重试
      retry:
        #开启重试
        enabled: true
        # 其他实例的重试次数，多节点的情况下使用
        max-retries-on-next-service-instance: 0
        # 是否所有的请求都重试，false 表示只有 GET 请求才重试
        retry-on-all-operations: true
        # 同一个实例的重试次数，不包括第一次调用；比如填了 3，实际会调用 4 次
        max-retries-on-same-service-instance: 1
  servlet:
    #设置上传文件
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 10MB
  #设置数据源
  datasource:
    druid:
      driver-class-name: com.mysql.jdbc.Driver
      url: jdbc:mysql://hzzzlc.tpddns.cn:13306/test03?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance&useSSL=false&nullCatalogMeansCurrent=true&serverTimezone=Asia/Shanghai
      username: passis
      password: Zzlc_1qaz789
      #初始化连接数量，最大最小连接数
      initial-size: 5
      max-active: 10
      min-idle: 3
      #获取连接等待超时的时间
      max-wait: 600000

      #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 600000
      #配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 1000000 #300000
      #用来检测连接是否有效的sql，要求是一个查询语句
      validation-query: SELECT 1
      #申请连接的时候检测
      test-while-idle: true
      #申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能
      test-on-borrow: false
      #归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能
      test-on-return: false
      #打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 50
      #属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
      #监控统计用的filter:stat 日志用的filter:log4j 防御SQL注入的filter:wall
      filters: stat
      stat-view-servlet:
        #allow: '*'
        #deny: 172.16.0.117
        login-username: druid
        login-password: druidzzlc123
        reset-enable: false
        url-pattern: '/druid/*'
      web-stat-filter:
        url-pattern: '/*'
        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'
#配置feign请求接口,底层包装loadbalancer
feign:
  #配置客户端
  client:
    config:
      default:
        #连接超时
        connectTimeout: 5000
        #读超时
        readTimeout: 5000
        #日志级别
        loggerLevel: full
  #配置压缩
  compression:
    request:
      #开启请求压缩
      enabled: true
      #压缩文件类型
      mime-types: text/xml,application/xml,application/json
      min-request-size: 2048
    #开启响应压缩
    response:
      enabled: true

resilience4j:
  #配置重试
  retry:
    retry-aspect-order: 100
    instances:
      retryA:
        # 重试次数
        maxRetryAttempts: 4
        # 重试等待
        waitDuration: 1s
        # 间隔乘数(场景: 正好每次间隔为1的时候卡顿 它就有用了 间隔就变了 例如 1 1.1 1.21....)
        exponentialBackoffMultiplier: 1
        retryExceptions:
          - java.lang.RuntimeException
  timelimiter:
    instances:
      timeA:
        timeoutDuration: 2s
        cancelRunningFuture: true


mybatis-plus:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.springcloud.test.system.entity
  configuration:
    default-fetch-size: 100
    map-underscore-to-camel-case: true
    default-statement-timeout: 1000
    call-setters-on-nulls: true
    lazy-loading-enabled: true
    aggressive-lazy-loading: false
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      logic-delete-field: isDelete
      logic-delete-value: 1
      logic-not-delete-value: 0

logging:
  level:
    com.springcloud.test.system: debug


